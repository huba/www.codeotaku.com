
// Interface:

@interface PMMigrationController : NSObject

@property(nonatomic,retain) NSString * storeType;
@property(nonatomic,retain) NSManagedObjectModel * targetModel;
@property(nonatomic,retain) NSArray * bundles;
@property(nonatomic,retain) NSArray * intermediateModels;
@property(nonatomic,retain) NSURL * temporaryDirectory;

+ (NSArray*)findIntermediateModelsForBundle: (NSBundle*)bundle;
+ (NSURL*) temporaryDirectoryAppropriateForURL:(NSURL*)sourceURL;

- (BOOL) requiresMigration:(NSURL*)storeURL;
- (BOOL) migrateURL:(NSURL*)sourceStoreURL toURL:(NSURL*)destinationStoreURL error:(NSError **)error;

@end

// Implementation:

@implementation PMMigrationController

@synthesize storeType = _storeType, targetModel = _targetModel, bundles = _bundles, intermediateModels = _intermediateModels, temporaryDirectory = _temporaryDirectory;

+ (NSArray*)findIntermediateModelsForBundle: (NSBundle*)bundle {
	//Find all of the mom and momd files in the Resources directory
    NSMutableArray * modelPaths = [NSMutableArray array];
	
	NSAutoreleasePool * pool = [NSAutoreleasePool new];
	
	// Scan model directories:
	NSArray * modelDirectories = [bundle pathsForResourcesOfType:@"momd" inDirectory:nil];
    for (NSString * path in modelDirectories) {
        NSString * subdirectory = [path lastPathComponent];
		
        NSArray * array = [bundle pathsForResourcesOfType:@"mom" inDirectory:subdirectory];
        [modelPaths addObjectsFromArray:array];
    }
	
    NSArray* otherModels = [bundle pathsForResourcesOfType:@"mom" inDirectory:nil];
    [modelPaths addObjectsFromArray:otherModels];

	[pool release];
	
	return modelPaths;
}

- (NSMappingModel*) mappingModelForSourceModel:(NSManagedObjectModel*)sourceModel targetModel:(NSManagedObjectModel**)targetModel {
	NSMappingModel * mappingModel = nil;
	
    for (NSString * modelPath in self.intermediateModels) {
        *targetModel = [[[NSManagedObjectModel alloc] initWithContentsOfURL:[NSURL fileURLWithPath:modelPath]] autorelease];
        mappingModel = [NSMappingModel mappingModelFromBundles:self.bundles forSourceModel:sourceModel destinationModel:*targetModel];
		
        if (mappingModel) {
			NSLog(@"Found migration model: %@", modelPath);
			// If we found a mapping model then proceed:
            return mappingModel;
        }
    }
		
    // We have tested every model and didn't find any candidates:
	*targetModel = nil;
	return nil;
}

- (NSMigrationManager*) fetchMigrationManagerForSourceMetadata:(NSDictionary*)sourceMetadata mappingModel:(NSMappingModel **)mappingModel error:(NSError**)error {
    //Find the source model:
    NSManagedObjectModel *sourceModel = [NSManagedObjectModel mergedModelFromBundles:nil forStoreMetadata:sourceMetadata];
    if(sourceModel == nil) {
        NSLog(@"Failed to find source model %@", [sourceMetadata description]);
        return NO;
    }
	
	NSManagedObjectModel * targetModel = nil;
	*mappingModel = [self mappingModelForSourceModel:sourceModel targetModel:&targetModel];
	
	if (*mappingModel == nil) {
		NSLog(@"No mapping model found!");
		return NO;
	}
	
    return [[[NSMigrationManager alloc] initWithSourceModel:sourceModel destinationModel:targetModel] autorelease];
}

+ (NSURL*) temporaryDirectoryAppropriateForURL:(NSURL*)sourceURL {
	NSError * error = nil;
	
	NSURL * intermediateURL = [[NSFileManager defaultManager] URLForDirectory:NSItemReplacementDirectory inDomain:NSUserDomainMask appropriateForURL:sourceURL create:YES error:&error];

	if (error) {
		NSLog(@"Error finding temporary directory for URL %@: %@", sourceURL, error);
	}
	
	return intermediateURL;
}

- (BOOL) progressivelyMigrateURL:(NSURL*)sourceStoreURL toURL:(NSURL*)destinationStoreURL step:(NSUInteger)step error:(NSError **)error {
	// Get the source metadata:
    NSDictionary *sourceMetadata = [NSPersistentStoreCoordinator metadataForPersistentStoreOfType:self.storeType URL:sourceStoreURL error:error];
	
    if (!sourceMetadata) {
        return NO;
    }
	
    if ([self.targetModel isConfiguration:nil compatibleWithStoreMetadata:sourceMetadata]) {
		// We have migrated to the target model, move the sourceStoreURL to destinationStoreURL:
		NSFileManager * fileManager = [NSFileManager defaultManager];
		
		if ([fileManager fileExistsAtPath:[destinationStoreURL path]]) {
			[fileManager removeItemAtURL:destinationStoreURL error:error];
		//	[[NSWorkspace sharedWorkspace] recycleURLs:[NSArray arrayWithObject:destinationStoreURL] completionHandler:nil];
		}
		
		return [fileManager copyItemAtURL:sourceStoreURL toURL:destinationStoreURL error:error];
    }
	
	// Figure out how to do the migration:
	NSMappingModel * mappingModel = nil;
	NSMigrationManager * manager = [self fetchMigrationManagerForSourceMetadata:sourceMetadata mappingModel:&mappingModel error:error];
	
	if (!manager) {
		NSLog(@"Failed to instantiate migration manager!");
		return NO;
	}
	
	// Actually do the migration:
	NSURL * intermediateStoreURL = [self.temporaryDirectory URLByAppendingPathComponent:[NSString stringWithFormat:@"migration-%d", step]];
	
	NSLog(@"Migrating URL %@ to %@", sourceStoreURL, intermediateStoreURL);
    if (![manager migrateStoreFromURL:sourceStoreURL type:self.storeType options:nil withMappingModel:mappingModel toDestinationURL:intermediateStoreURL destinationType:self.storeType destinationOptions:nil error:error]) {
		NSLog(@"Migration failed!");
        return NO;
    }
	
    // Rince and repeat:
	return [self progressivelyMigrateURL:intermediateStoreURL toURL:destinationStoreURL step:step+1 error:error];
}

- (BOOL) requiresMigration:(NSURL*)storeURL {
	NSError * error = nil;
	
	// Get the source metadata:
    NSDictionary *sourceMetadata = [NSPersistentStoreCoordinator metadataForPersistentStoreOfType:self.storeType URL:storeURL error:&error];
	
    if (!sourceMetadata) {
		NSLog(@"Error fetching source metadata: %@", error);
        return NO;
    }
	
    if ([self.targetModel isConfiguration:nil compatibleWithStoreMetadata:sourceMetadata]) {
		return NO;
    }
	
	return YES;
}

- (BOOL) migrateURL:(NSURL*)sourceStoreURL toURL:(NSURL*)destinationStoreURL error:(NSError **)error {
	self.temporaryDirectory = [[self class] temporaryDirectoryAppropriateForURL:sourceStoreURL];
	
	// We copy the source to avoid any problems with source and destination being the same:
	NSFileManager * fileManager = [NSFileManager defaultManager];
	
	NSURL * initialURL = [self.temporaryDirectory URLByAppendingPathComponent:@"initial"];
	if (![fileManager copyItemAtURL:sourceStoreURL toURL:initialURL error:error]) {
		NSLog(@"Failed to create initial migration source, copying %@ to %@: %@", sourceStoreURL, initialURL, error);
		return NO;
	}
	
	BOOL result = [self progressivelyMigrateURL:initialURL toURL:destinationStoreURL step:1 error:error];
	
	// Ignore errors...
	[fileManager removeItemAtURL:self.temporaryDirectory error:nil];
	
	return result;
}

@end

<contents-page title="Post Remote Log Documentation">
	<heading>Usage</heading>
	
	<p>Post Remote Log is designed to be simple to use.</p>
	
	<listing src="usage.txt" brush="bash" />
	
	<h2>Log Server</h2>
	
	<p><code>post-remote-log-server</code> is a simple implementation using <code>thin</code> (which you will need to install before using it) which provides an XMLRPC log server. Here is a basic setup:</p>
	
	<listing src="example_server.txt" brush="bash" />
	
	<p>Once the server is running, you can then setup the client.</p>
	
	<h2>Sending a Log</h2>
	
	<p>Now, we need to configure the client. Here is the configuration file, which I've saved as <code>localhost-config.yaml</code>, and assumes you are running everything on <code>localhost</code>.</p>
	
	<listing src="example_client_config.txt" brush="yaml" />
	
	<p>We can now run <code>post-remote-log</code> client and send some data</p>
	
	<listing src="example_client_run.txt" brush="bash" />
	
	<p>On the server we expect to see the following:</p>
	
	<listing src="example_server_run.txt" brush="bash" />
	
	<h2>Running as a Daemon</h2>
	
	<p>You can run <code>post-remote-log</code> as a daemon (i.e. in the background) by specifying the <code>-d</code> option. This ensures that if there are network connectivity issues, or network delays, they will not hold up any script that uses <code>post-remote-log</code> for diagnostic purposes.</p>
	
	<h2>Advanced Usage</h2>
	
	<p><code>post-remote-log-server</code> is only intended as an example for setup and testing. It is highly recommended that you incorporate the log reporting scheme into your own system administration system. In this scenario, use the <code>classification</code> field to determine the type of data being sent.</p>
</contents-page>
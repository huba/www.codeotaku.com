<page>
	<heading>jQuery.Syntax Advanced Setup</heading>
	
	<p>jQuery.Syntax was designed to be simple to use, but it also has many advanced features.</p>
	
	<h2 id="Installer">Installer</h2>
	
	<p>The installer provides a simple way to deploy customised versions of jQuery.Syntax. It is the primary way to access advanced features of jQuery.Syntax:</p>
	
	<listing src="rake_install.txt" brush="bash" />
	
	<p>The installer processes the source files and theme, to produce a set of files that can be deployed to a website.</p>
		
	<p>By default <code class="syntax bash-script">rake install</code> reads the <code class="syntax">install.yaml</code> file for information about which theme to generate and where to put the minified javascript and stylesheets. Here is an example <code class="syntax">install.yaml</code>:</p>
	
	<listing src="install_yaml.txt" brush="yaml" />
	
	<h3>Specifying the configuration file</h3>
	
	<p>It is possible to specify a different file to read the install configuration from by supplying it as an argument:</p>
	
	<listing brush="bash">$ rake install[site.yaml]</listing>
	
	<h3>Specifying a different prefix</h3>
	
	<p>You can also specify the installation directory by setting the <code class="syntax">PREFIX</code> environment variable. This will override the prefix setting in <code class="syntax">install.yaml</code>:</p>
	
	<listing brush="bash">$ PREFIX=public2 rake install</listing>
	
	<h3>Dependencies</h3>
	
	<p>You will need to install Ruby to use the installer, along with the following gems:</p>
	
	<listing brush="bash">$ sudo gem install rake haml</listing>
	
	<h2 id="SyntaxHighlightingOptions">Syntax Highlighting Options</h2>
	
	<p>These options are for use when highlighting a specific element:</p>
	
	<listing src="specific_element.txt" brush="javascript" />
	
	<dl class="options">
		<dt>brush</dt>
		<dd>The name of the brush to use for syntax highlighting. This is not the same as the class name <code class="syntax">brush-{language}</code> but is infact the exact name of the language <code class="syntax">{language}</code>. Defaults to <code class="syntax">plain</code>.</dd>
		<dt>tabWidth</dt>
		<dd>Used for the tab to space conversion. Defaults to 4.</dd>
		<dt>layout</dt>
		<dd>Used for producing HTML from a set of lines. Defaults to <code class="syntax">plain</code>. Don't use this for the simple function (use <code class="syntax">blockLayout</code> and <code class="syntax">inlineLayout</code>).</dd>
		<dt>linkify</dt>
		<dd>Turn elements that matched <code class="syntax html"><span class="attribute">href</span></code> into actual links.</dd>
		<dt>replace</dt>
		<dd>If true, replace the given container with the resulting highlighted element. This is generally what you want to do, unless you are highlighting something and then using the result elsewhere, e.g. say you wanted to highlight <code class="syntax html">&lt;script type="text/javascript"&gt;</code> tags and then insert them into the body of the page.</dd>
	</dl>
	
	<h2 id="CreatingYourOwnTheme">Creating Your Own Theme</h2>
	
	<p>Simply create a new subdirectory in the <code class="syntax">themes</code> directory. Then, create files named using the convention <code class="syntax">jquery.syntax.{resource-type}.{name}.sass</code>. For example, a new theme named <code class="syntax">coffee</code>:</p>
	
	<ul>
		<li><code class="syntax">themes/coffee/jquery.syntax.brush.apache.sass</code></li>
		<li><code class="syntax">themes/coffee/jquery.syntax.layout.table.sass</code></li>
	</ul>
	
	<p>Once you've done this, update <code class="syntax">install.yaml</code> and run the installer to update the current deployment.</p>
	
	<p>You can also create a theme configuration file <code class="syntax">themes/config.yaml</code> which specifies how the theme builds on other themes:</p>
	
	<listing src="theme-config.txt" brush="yaml" />
	
	<h2 id="CreatingYourOwnLayout">Creating Your Own Layout</h2>
	
	<p>Layouts are specified using the naming format <code class="syntax">jquery.syntax.layout.{name}.js</code> in the main jQuery.Syntax directory.</p>
	
	<p>A layout is basically a function which translates the code from a set of highlighted lines into actual structured output. The <code class="syntax javascript">"table"</code> layout does this by creating a <code class="syntax html">&lt;table&gt;</code> and adding a row for each line. The <code class="syntax javascript">"inline"</code> layout creates an inline <code class="syntax html">&lt;code&gt;</code> element.</p>
	
	<p>It is also possible to bundle a stylesheet with a layout, which means you will need to generate a file <code class="syntax">jquery.syntax.layout.{name}.sass</code> in an appropriate <code class="syntax">theme</code> subdirectory.</p>
	
	<p>Once you have done all this, use your theme by specifying it as an option:</p>
	
	<listing src="custom_layout.txt" brush="html" />
	
	<p>You can see several of the <a href="../../layouts">sample layouts</a> that come with jQuery.Syntax.</p>
	
	<h2 id="CreatingYourOwnBrush">Creating Your Own Brush</h2>
	
	<p>Brushes are specified using the naming format <code class="syntax">jquery.syntax.brush.{name}.js</code>. As with layouts, they also have an associated optional stylesheet named <code class="syntax">jquery.syntax.brush.{name}.sass</code>. Here is a simple example:</p>
	
	<listing src="new_brush.txt" brush="javascript" />
	
	<p>Once you've created or updated a brush, you will need to run the installer again to update the current deployment.</p>
	
	<h2 id="DynamicHighlighting">Highlighting Individual Elements</h2>
	
	<p>jQuery.Syntax provides the basic <code class="syntax javascript">jQuery.syntax(...)</code> function as outlined above, but this is actually a wrapper for another more flexible function <code class="syntax javascript">jQuery.fn.syntax(...)</code>. This function is a standard <code class="syntax javascript">jQuery</code> element function, and can be used to highlight specific elements.</p>
	
	<listing src="elements.txt" brush="javascript" />
	
	<p>When integrating with dynamically generated code (such as via AJAX), there are two options: either use the simple syntax function with a specific context element (where the context element contains the dynamically generated content) or use the specific syntax function with any source code that has been dynamically generated.</p>
	
	<p>As an example, <a href="http://www.syntax-highlighting.com/p/">Syntax-Highlighting.com</a> uses the specific function since it is processing a specific block of source code. Another example is the <a href="http://www.oriontransfer.co.nz/blog/">Orion Transfer Weblog</a> which allows source code in the comment preview. Because this is sanitised by the server, when the page is updated via AJAX, the simple function is used to render any source code in the comment preview.</p>
	
	<h3>Simple Function Example</h3>
	
	<listing brush="javascript" src="simple_function.txt" />
	
	<h3>Specific Function Example</h3>
	
	<listing brush="javascript" src="specific_function.txt" />
	
	<h2 id="ZeroLoadScript">Zero-Load Script</h2>
	
	<p>It is possible to have many pages without syntax highlighting, so why have the overhead of loading an extra JavaScript every time? You can use the following jQuery snippet to avoid loading jQuery.Syntax at all when it is not needed.</p>
	
	<listing src="zero_load.txt" brush="javascript" />
</page>
<content:contents-page title="RubyDNS Documentation">
	<content:heading>DNS Verification</content:heading>
	
	<p><code>rd-dns-check</code> is a tool to help migrate data from one DNS server to another and assist with DNS auditing. It assists by providing a comprehensive framework for retrieving and verifying sets of records. It has several main functions:</p>
	
	<ul>
		<li><strong>fetch:</strong> Pull down a list of hosts. Filters TXT and HINFO records. DNS transfers must be enabled.</li>
		<li><strong>check:</strong> Check that the DNS server returns results as specified by the file.</li>
		<li><strong>query:</strong> Query the remote DNS server with all hostnames in the given file, and checks the IP addresses are consistent.</li>
		<li><strong>ping:</strong> Ping all hosts to check if they are available or not.</li>
		<li><strong>reverse:</strong> Check that all address records have appropriate reverse entries.</li>
	</ul>
	
	<p>This tool relies heavily on <code>dig</code> and <code>ping</code> so ensure these are installed and working correctly before trying to use this tool.</p>
	
	<p>For the examples, assume the following DNS servers:</p>
	
	<table class="basic">
		<thead>
			<tr><th>Hostname</th><th>Purpose</th><th>Address</th></tr>
		</thead>
		<tbody>
			<tr><td>ns1.mydomain.com</td><td>Current Primary DNS Server</td><td>10.0.0.10</td></tr>
			<tr><td>ns1-new.mydomain.com</td><td>New Primary DNS Server</td><td>10.0.0.20</td></tr>
		</tbody>
	</table>
	
	<h2>Pulling Down Data</h2>
	
	<p>Your DNS server will need to be configured for zone transfers in order for this to work.</p>

	<content:listing src="fetch.txt" brush="bash" />

	<p>The file <code>mydomain.com.yml</code> now contains a bunch of records. This command ignores the following records: TXT, HINFO, SOA, NS, so they won't be in the file. There is currently no way to change this behavior. However, this command cannot check those types of records anyway. The data in this file is stored using YAML, hence if you want to change some names or addresses, or remove addresses, you can just edit this file directly using a text editor.</p>

	<p>Here is an example of the data generated:</p>

	<content:listing src="example_data.txt" />

	<p>It is generally expected that if one is using this tool to migrate to a new DNS server, modifications and removals will need to be made to the <code>mydomain.com.yml</code> file to remove old records that are no longer useful (servers that don't exist, for example), or to add or change records for equipment that still exists but has not had a consistent naming convention in the past.</p>
	
	<h2>Checking Records using Zone Transfer</h2>
	
	<p>The file we just pulled can now be used for a number of different purposes. This particular command lets us check whether a file is identical to another DNS server. Please note that the secondary DNS server must support transfer. If this is not possible, there are other checks you can use which provide a similar output, but are not as exact.</p>

	<p>If we test it against the original DNS server that we pulled the data from we will get no errors (unless something is really screwy):</p>

	<content:listing src="check-success.txt" brush="bash" />

	<p>If you check it against another server set up for the same domain, which is missing records, you will find they are output as errors. Here is an example from a real world DNS setup, however it is truncated and anonymized to protect the innocent:</p>

	<content:listing src="check-errors.txt" brush="bash" />
	
	<p>From this report we can see that the DNS servers are not identical. We can use this information to fix any problems, if we need them to be identical.</p>

	<p>One use of this tool is to use it for auditing a DNS server. It can be run as part of a CRON job to check whether important DNS records exist and are returning the correct IP address.</p>
	
	<h2>Checking Records using Individual Queries</h2>

	<p>It is possible to query the DNS server for records based on the hostname given in the input file. We can then match this up to an IP address, and confirm that the addresses match. This is a useful test to check whether a DNS server will return the same address given the same hostname, but not necessarily via the same means - i.e. on one server a hostname might be a CNAME record, but on another it might be an A record. In this case, if the final address data is the same, there will be no error reported.</p>

	<p>So, if you are migrating your DNS server and want to change the structure of some host records, but don't want to break anything, this tool will check to make sure that all original hostnames still resolve to the given IP addresses.</p>

	<content:listing src="check-individual-queries.txt" brush="bash" />
	
	<h2>Pinging All Hosts</h2>
	
	<p>In order to find hosts which no longer exist, there is the ping check. This will attempt to ping every A record and report back if there were any failures. Typically, if a failure was because the server/device no longer exists, then one would remove it from the <code>mydomain.com.yml</code> file.</p>
	
	<content:listing src="ping.txt" brush="bash" />
	
	<h2>Checking the Reverse Records</h2>

	<p>In order to ensure that a DNS is set up correctly, we need to make sure all the reverse records are in place. This is done by resolving all the addresses in the input files to hostnames.</p>

	<p>For example, to check if the server <code>ns1.mydomain.com</code> has a reverse record for 192.168.1.10 we can use dig:</p>

	<content:listing src="dig-reverse.txt" brush="bash" />
	
	<p>N.B: The options <code>+nottlid +nocmd +noall +answer</code> simply make <code>dig</code> less verbose.</p>

	<p>We can test all addresses in a given file:</p>

	<content:listing src="check-reverse.txt" brush="bash" />
</content:contents-page>

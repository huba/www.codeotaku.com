<content:entry>
	<p>When dealing with state, synchronization between multiple simulations may become important. For example, with a client-server model network game, or when distributing the simulation processing.</p>

	<p>There are two approaches to state synchronization within this model, which ultimately are two sides of the same coin.</p>

	<h2>Event based state management</h2>

	<p>We maintain state by sending the same events to every simulation. If events are dropped or lost, or not applied in time, the simulation may become incorrect<reference>1</reference>, although this can be corrected by sending a "keyframe" of the simulation state to bring the simulation back on track.</p>

	<ul>
		<li>An event signals some sort of state change to the world.</li>
		<li>Applying a single event may change multiple parts of the simulation.</li>
		<li>Events can minimize network traffic as much data can be evaluated on the client.</li>
		<li>Events sent to clients can be filtered programmatically based on proximity or relevance, thus reducing bandwidth even more.</li>
		<li>An example of an event is an encapsulated transmission of the <code class="syntax clang">IWorldEvents</code> object. This contains a discrete event that changes the state of the world and is applied at a given timestamp.</li>
	</ul>
	
	<p>Event based systems are generally easier to implement but maintaining a consistent simulation across multiple discrete processes can be difficult<reference>2 3</reference>. They are typically used for real-time games and simulations. Differences in host processor (e.g. floating point accuracy, word size, operating system and standard library implementation) can cause a wide variety of difficult to handle bugs.</p>

	<h2>Synchronization based state management</h2>

	<p>We maintain state by keeping track of individual state values, and noting when they change. These changes are then serialised and sent out across the wire. In effect this is a structured event based state management, but with the effect that events may be coalesced or discarded if they are not important.</p>

	<ul>
		<li>Synchronize state between client and server by monitoring changes to key variables.</li>
		<li>Server maintains world state: sets of objects, relationships and state.</li>
		<li>Client needs to know a portion of the world state: subsets of objects, relationships and state.</li>
		<li>State is updated with one of four events: update primitive, update relationship, instantiate object, destroy object.</li>
	</ul>

	<p>State synchronization is better for systems where precise step-by-step simulation is not so important, but rather that the final world state needs to be correct regardless of simulation behavior. They are typically used for turn-based games and user-interfaces.</p>
		
	<h2>Further Reading</h2>
	
	<references>
		<li><a name="1" href="http://www.altdevblogaday.com/2011/07/09/synchronous-rts-engines-and-a-tale-of-desyncs/">Synchronous RTS Engines and a Tale of Desyncs</a>.</li>
		<li><a name="2" href="http://www.altdevblogaday.com/2011/07/24/synchronous-rts-engines-2-sync-harder/">Synchronous RTS Engines 2: Sync Harder</a>.</li>
		<li><a name="3" href="http://www.gamasutra.com/view/feature/3094/1500_archers_on_a_288_network_.php">1500 Archers on a 28.8: Network Programming in Age of Empires and Beyond</a>.</li>
		<li><a href="http://community.eveonline.com/devblog.asp?a=blog&amp;nbid=1771">EVE Online: Facing Destiny</a>.</li>
	</references>
</content:entry>
<content:entry>
	<p>I was interested to learn more about garbage collection. The idea is not complex, but obviously writing a fast, portable implementation that deals with all the edge cases is a challenge.</p>
	
	<p>However, I just wanted to try something simple - detecting when pointers are no longer directly on the stack is a good starting point, so I implemented that with a very basic mark and sweep algorithm.</p>
	
	<content:listing src="garbage-collector.txt" brush="c++" />
	
	<p>This garbage collector will only scan the stack for allocated memory pointers. It isn't portable or efficient. However, I enjoyed writing the code and trying it out. Maybe I'll make something more complete in the future.</p>
	
	<h2>Limitations (Update)</h2>
	
	<p>Because this garbage collector is designed to be very simple, it has many limitations:</p>
	
	<ul>
		<li>Assumes pointers on the stack will be aligned.</li>
		<li>Doesn't consider global variables (including class/function static variables).</li>
		<li>Only works with a single stack/thread.</li>
		<li>Doesn't consider pointers in registers, or attempt to flush these to the stack before collecting.</li>
		<li>The calculation of the stack is probably not portable.</li>
	</ul>
	
	<p>Feel free to improve the code and send suggestions. Ideally, I want to keep it as easy to understand as possible.</p>
</content:entry>